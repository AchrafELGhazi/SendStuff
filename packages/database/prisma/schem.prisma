
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  campaigns   Campaign[]
  subscribers Subscriber[]

  @@map("users")
}

model Subscriber {
  id         String            @id @default(cuid())
  email      String
  name       String?
  status     SubscriberStatus  @default(ACTIVE)
  metadata   Json?
  tags       String[]
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")

  // Relations
  userId       String @map("user_id")
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  campaignLogs CampaignLog[]

  @@unique([email, userId])
  @@map("subscribers")
}

model Campaign {
  id          String         @id @default(cuid())
  title       String
  subject     String
  content     String
  htmlContent String?        @map("html_content")
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?      @map("scheduled_at")
  sentAt      DateTime?      @map("sent_at")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  campaignLogs CampaignLog[]

  @@map("campaigns")
}

model CampaignLog {
  id         String      @id @default(cuid())
  event      LogEvent
  metadata   Json?
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relations
  campaignId   String     @map("campaign_id")
  campaign     Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  subscriberId String     @map("subscriber_id")
  subscriber   Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@map("campaign_logs")
}

enum Role {
  USER
  ADMIN
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum LogEvent {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
}